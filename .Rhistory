x <- data.frame(xts::as.xts(get(quantmod::getSymbols(symbol))))
if (test.new.price == 0) {
x = x
} else {
intra.day.test <- matrix(c(0,0,0,test.new.price,0,0), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
x = data.frame(rbind(x, intra.day.test))
}
Close<-x[,4] # Define Close as adjusted closing price
# A new function needs redefine data from above:
# Create SMA for multiple periods
SMA10<-SMA(Close,n=10)
SMA()
# A new function needs redefine data from above:
# Create SMA for multiple periods
SMA10<-TTR::SMA(Close,n=10)
SMA10
# Create SMA for multiple periods
SMA10<-TTR::SMA(Close,n=10)
SMA20<-TTR::SMA(Close,n=20)
SMA30<-TTR::SMA(Close,n=30)
SMA50<-TTR::SMA(Close,n=50)
SMA200<-TTR::SMA(Close,n=200)
SMA250<-TTR::SMA(Close,n=250)
RSI10 <- (TTR::RSI(Close,n=10)-50)*height*5
RSI20 <- (TTR::RSI(Close,n=20)-50)*height*5
RSI30 <- (TTR::RSI(Close,n=30)-50)*height*5
RSI50 <- (TTR::RSI(Close,n=50)-50)*height*5
RSI200 <- (TTR::RSI(Close,n=200)-50)*height*5
RSI250 <- (TTR::RSI(Close,n=250)-50)*height*5
RSI10 <- (TTR::RSI(Close,n=10)-50)*height
RSI20 <- (TTR::RSI(Close,n=20)-50)*height
RSI30 <- (TTR::RSI(Close,n=30)-50)*height
RSI50 <- (TTR::RSI(Close,n=50)-50)*height
RSI200 <- (TTR::RSI(Close,n=200)-50)*height
RSI250 <- (TTR::RSI(Close,n=250)-50)*height
# Create computable dataset: Close/SMA_i-1
ratio_10<-(Close/SMA10-1)
ratio_20<-(Close/SMA20-1)
ratio_30<-(Close/SMA30-1)
ratio_50<-(Close/SMA50-1)
ratio_200<-(Close/SMA200-1)
ratio_250<-(Close/SMA250-1)
all_data_ratio <- cbind.data.frame(
ratio_10,
ratio_20,
ratio_30,
ratio_50,
ratio_200,
ratio_250
)
# Here we want to create signal for each column
# Then we add them all together
all_data_ratio[is.na(all_data_ratio)] <- 0 # Get rid of NAs
sd(all_data_ratio[,1])
sd(all_data_ratio[,2])
sd(all_data_ratio[,3])
sd(all_data_ratio[,4])
sd(all_data_ratio[,5])
sd(all_data_ratio[,6])
coef<-c
m<-height*mean(Close)
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] <= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] <= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] <= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] <= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] <= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] <= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal)
library(YinsStockPredictoR)
YinsStockPredictoR::stock_predict('AAPL')
all_data_buy_signal <- all_data_signal
all_data_buy_signal
data.frame(all_data_signal[(nrow(all_data_signal)-past.n.days):nrow(all_data_signal),])
data.frame(all_data_buy_signal[(nrow(all_data_buy_signal)-past.n.days):nrow(all_data_buy_signal),])
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] >= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] >= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] >= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] >= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] >= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] >= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal); all_data_sell_signal <- all_data_signal
data.frame(all_data_sell_signal[(nrow(all_data_sell_signal)-past.n.days):nrow(all_data_sell_signal),])
all_data_signal
# Buy table;
Buy.table<-function(x,r_day_plot,end_day_plot,c,height,past.n.days,test.new.price = 0){
if (test.new.price == 0) {
x = x
} else {
intra.day.test <- matrix(c(0,0,0,test.new.price,0,0), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
x = data.frame(rbind(x, intra.day.test))
}
Close<-x[,4] # Define Close as adjusted closing price
# A new function needs redefine data from above:
# Create SMA for multiple periods
SMA10<-SMA(Close,n=10)
SMA20<-SMA(Close,n=20)
SMA30<-SMA(Close,n=30)
SMA50<-SMA(Close,n=50)
SMA200<-SMA(Close,n=200)
SMA250<-SMA(Close,n=250)
# Create RSI for multiple periods
RSI10 <- (RSI(Close,n=10)-50)*height*5
RSI20 <- (RSI(Close,n=20)-50)*height*5
RSI30 <- (RSI(Close,n=30)-50)*height*5
RSI50 <- (RSI(Close,n=50)-50)*height*5
RSI200 <- (RSI(Close,n=200)-50)*height*5
RSI250 <- (RSI(Close,n=250)-50)*height*5
# Create computable dataset: Close/SMA_i-1
ratio_10<-(Close/SMA10-1)
ratio_20<-(Close/SMA20-1)
ratio_30<-(Close/SMA30-1)
ratio_50<-(Close/SMA50-1)
ratio_200<-(Close/SMA200-1)
ratio_250<-(Close/SMA250-1)
all_data_ratio <- cbind.data.frame(
ratio_10,
ratio_20,
ratio_30,
ratio_50,
ratio_200,
ratio_250
)
# Here we want to create signal for each column
# Then we add them all together
all_data_ratio[is.na(all_data_ratio)] <- 0 # Get rid of NAs
sd(all_data_ratio[,1])
sd(all_data_ratio[,2])
sd(all_data_ratio[,3])
sd(all_data_ratio[,4])
sd(all_data_ratio[,5])
sd(all_data_ratio[,6])
coef<-c
m<-height*mean(Close)
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] <= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] <= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] <= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] <= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] <= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] <= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal)
return(
#tail(all_data_signal)
all_data_signal[(nrow(all_data_signal)-past.n.days):nrow(all_data_signal),]
)
} # End of function # End of function # End of function
AAPL
Buy.table(AAPL,.8,1,-1.2,.1,2,0)
library(TTR)
Buy.table(AAPL,.8,1,-1.2,.1,2,0)
head(x)
x <- data.frame(xts::as.xts(get(quantmod::getSymbols(symbol))))
if (test.new.price == 0) {
x = x
} else {
intra.day.test <- matrix(c(0,0,0,test.new.price,0,0), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
x = data.frame(rbind(x, intra.day.test))
}
Close<-x[,4] # Define Close as adjusted closing price
# A new function needs redefine data from above:
# Create SMA for multiple periods
SMA10<-TTR::SMA(Close,n=10)
SMA20<-TTR::SMA(Close,n=20)
SMA30<-TTR::SMA(Close,n=30)
SMA50<-TTR::SMA(Close,n=50)
SMA200<-TTR::SMA(Close,n=200)
SMA250<-TTR::SMA(Close,n=250)
# Create RSI for multiple periods
RSI10 <- (TTR::RSI(Close,n=10)-50)*height
RSI20 <- (TTR::RSI(Close,n=20)-50)*height
RSI30 <- (TTR::RSI(Close,n=30)-50)*height
RSI50 <- (TTR::RSI(Close,n=50)-50)*height
RSI200 <- (TTR::RSI(Close,n=200)-50)*height
RSI250 <- (TTR::RSI(Close,n=250)-50)*height
# Create computable dataset: Close/SMA_i-1
ratio_10<-(Close/SMA10-1)
ratio_20<-(Close/SMA20-1)
ratio_30<-(Close/SMA30-1)
ratio_50<-(Close/SMA50-1)
ratio_200<-(Close/SMA200-1)
ratio_250<-(Close/SMA250-1)
all_data_ratio <- cbind.data.frame(
ratio_10,
ratio_20,
ratio_30,
ratio_50,
ratio_200,
ratio_250
)
# Here we want to create signal for each column
# Then we add them all together
all_data_ratio[is.na(all_data_ratio)] <- 0 # Get rid of NAs
sd(all_data_ratio[,1])
sd(all_data_ratio[,2])
sd(all_data_ratio[,3])
sd(all_data_ratio[,4])
sd(all_data_ratio[,5])
sd(all_data_ratio[,6])
coef<-c
m<-height*mean(Close)
# Buy Signal
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] <= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] <= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] <= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] <= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] <= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] <= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
# Consolidate
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal); all_data_buy_signal <- all_data_signal
tail(all_data_signal)
dim(all_data_signal)
dim(x)
rownmaes(x)
rownames(x)
length(rownames(x))
# Consolidate
all_data_signal <- cbind.data.frame(rownames(x), Close, all_data_ratio$Signal); all_data_buy_signal <- all_data_signal
head(all_data_signal)
# Sell Signal
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] >= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] >= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] >= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] >= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] >= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] >= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal); all_data_sell_signal <- all_data_signal
# Consolidate
# Here let us put buy sell signal table together
final_table <- cbind.data.frame(
Date = rownames(x),
Buy_Sginal = all_data_buy_signal,
Sell_Signal = all_data_sell_signal
)
Buy.Sell.Signal.Table = data.frame(final_table[(nrow(final_table)-past.n.days):nrow(final_table),])
Buy.Sell.Signal.Table
Buy.Sell.Signal.Table = data.frame(final_table[(nrow(final_table)-past.n.days):nrow(final_table),
c(1,2,3,5)])
Buy.Sell.Signal.Table
Buy.Sell.Signal.Table = data.frame(final_table[(nrow(final_table)-past.n.days):nrow(final_table),c(1,3,5)])
Buy.Sell.Signal.Table
Buy.Sell.Signal.Table = data.frame(final_table[(nrow(final_table)-past.n.days):nrow(final_table),c(1,3,4,6)])
Buy.Sell.Signal.Table
reduced_table <- data.frame(final_table[(nrow(final_table)-past.n.days):nrow(final_table),c(1,3,4,6)]);
colnames(reduced_table)
reduced_table
rownames(reduced_table)
rownames(reduced_table) <- reduced_table$Date
reduced_table
# Printing results
return(list(
TS.Result = (paste0("Tomorrow this stock goes up with probability: ", round(pred, 2))),
Buy.Sell.Signal.Table = reduced_table[, -1]
))
Buy.Sell.Signal.Table
Buy.Sell.Signal.Table = reduced_table[, -1]
Buy.Sell.Signal.Table
colnames(reduced_table) <- c("Date", "Close", "BuySignal", "SellSignal");
rownames(reduced_table) <- reduced_table$Date
Buy.Sell.Signal.Table = reduced_table[, -1]
Buy.Sell.Signal.Table
paste0("ClosePriceof",symbol)
library(YinsStockPredictoR)
YinsStockPredictoR::stock_predict('AAPL')
x <- data.frame(xts::as.xts(get(quantmod::getSymbols(symbol))))
if (test.new.price == 0) {
x = x
} else {
intra.day.test <- matrix(c(0,0,0,test.new.price,0,0), nrow = 1)
rownames(intra.day.test) <- as.character(Sys.Date())
x = data.frame(rbind(x, intra.day.test))
}
Close<-x[,4] # Define Close as adjusted closing price
# A new function needs redefine data from above:
# Create SMA for multiple periods
SMA10<-TTR::SMA(Close,n=10)
SMA20<-TTR::SMA(Close,n=20)
SMA30<-TTR::SMA(Close,n=30)
SMA50<-TTR::SMA(Close,n=50)
SMA200<-TTR::SMA(Close,n=200)
SMA250<-TTR::SMA(Close,n=250)
# Create RSI for multiple periods
RSI10 <- (TTR::RSI(Close,n=10)-50)*height
RSI20 <- (TTR::RSI(Close,n=20)-50)*height
RSI30 <- (TTR::RSI(Close,n=30)-50)*height
RSI50 <- (TTR::RSI(Close,n=50)-50)*height
RSI200 <- (TTR::RSI(Close,n=200)-50)*height
RSI250 <- (TTR::RSI(Close,n=250)-50)*height
# Create computable dataset: Close/SMA_i-1
ratio_10<-(Close/SMA10-1)
ratio_20<-(Close/SMA20-1)
ratio_30<-(Close/SMA30-1)
ratio_50<-(Close/SMA50-1)
ratio_200<-(Close/SMA200-1)
ratio_250<-(Close/SMA250-1)
all_data_ratio <- cbind.data.frame(
ratio_10,
ratio_20,
ratio_30,
ratio_50,
ratio_200,
ratio_250
)
# Here we want to create signal for each column
# Then we add them all together
all_data_ratio[is.na(all_data_ratio)] <- 0 # Get rid of NAs
sd(all_data_ratio[,1])
sd(all_data_ratio[,2])
sd(all_data_ratio[,3])
sd(all_data_ratio[,4])
sd(all_data_ratio[,5])
sd(all_data_ratio[,6])
coef<-c
m<-height*mean(Close)
# Buy Signal
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] <= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] <= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] <= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] <= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] <= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] <= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal); all_data_buy_signal <- all_data_signal
# Sell Signal
all_data_ratio$Sig1<-ifelse(
all_data_ratio[,1] >= coef*sd(all_data_ratio[,1]),
m, "0")
all_data_ratio$Sig2<-ifelse(
all_data_ratio[,2] >= coef*sd(all_data_ratio[,2]),
m, "0")
all_data_ratio$Sig3<-ifelse(
all_data_ratio[,3] >= coef*sd(all_data_ratio[,3]),
m, "0")
all_data_ratio$Sig4<-ifelse(
all_data_ratio[,4] >= coef*sd(all_data_ratio[,4]),
m, "0")
all_data_ratio$Sig5<-ifelse(
all_data_ratio[,5] >= coef*sd(all_data_ratio[,5]),
m, "0")
all_data_ratio$Sig6<-ifelse(
all_data_ratio[,6] >= coef*sd(all_data_ratio[,6]),
m, "0")
all_data_ratio$Signal <- (
as.numeric(all_data_ratio[,7])
+ as.numeric(all_data_ratio[,8])
+ as.numeric(all_data_ratio[,9])
+ as.numeric(all_data_ratio[,10])
+ as.numeric(all_data_ratio[,11])
+ as.numeric(all_data_ratio[,12])
)
all_data_signal <- cbind.data.frame(Close, all_data_ratio$Signal); all_data_sell_signal <- all_data_signal
final_table <- cbind.data.frame(
Date = rownames(x),
Buy_Sginal = all_data_buy_signal,
Sell_Signal = all_data_sell_signal
)
tail(final_table)
reduced_table <- data.frame(final_table[(nrow(final_table)-past.n.days):nrow(final_table),c(1,3,4,6)]);
reduced_table <- data.frame(final_table[(nrow(final_table)-past.n.days):nrow(final_table),-4]);
colnames(reduced_table) <- c("Date", paste0("ClosePriceof",symbol), "BuySignal", "SellSignal");
rownames(reduced_table) <- reduced_table$Date
reduced_table
TS.Result = (paste0("Tomorrow this stock goes up with probability: ", round(pred, 2)))
TS.Result
Buy.Sell.Signal.Table = reduced_table[, -1]
Buy.Sell.Signal.Table
Basic.Plot = dygraphs::dygraph(data.all,height="10%",width="80%") %>% dyCandlestick() %>% dyLegend(show = "onmouseover", hideOnMouseOut = FALSE)
library(YinsStockPredictoR)
YinsStockPredictoR::stock_predict('AAPL')
dygraphs::dygraph(data.all,height="10%",width="80%") %>% dyCandlestick() %>% dyLegend(show = "onmouseover", hideOnMouseOut = FALSE)
dygraphs::dygraph(data.all,height="10%",width="80%")
dygraphs::dygraph(x,height="10%",width="80%")
dygraphs::dygraph(x,height="10%",width="80%") %>% dyCandlestick() %>% dyLegend(show = "onmouseover", hideOnMouseOut = FALSE)
dygraphs::dygraph(x,height="10%",width="80%") %>%
dyCandlestick()
dygraphs::dygraph(x,height="10%",width="80%")+dyCandlestick()
library(dygraphs)
dygraph(x,height="10%",width="80%") %>% dyCandlestick() %>%
dyLegend(show = "onmouseover", hideOnMouseOut = FALSE)
dygraph(x) %>% dyCandlestick() %>%
dyLegend(show = "onmouseover", hideOnMouseOut = FALSE)
dygraphs::dygraph(x)+dyCandlestick()
dygraph(x) %>% dyCandlestick()
head(x)
dygraph(x[,4])
dygraph(data.frame(x[,4]))
remove(list=ls())
library(YinsStockPredictoR)
YinsStockPredictoR::stock_predict('AAPL')
example(stock_predictor)
library(YinsStockPredictoR)
stock_predict('FB')
